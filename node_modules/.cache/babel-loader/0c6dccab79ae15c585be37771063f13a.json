{"ast":null,"code":"var _jsxFileName = \"/Users/ajzanrahmetova/Desktop/Self study/React-JS-IT-cama/projects/1/src/components/Dialogs/DialogsContainer.jsx\";\nimport React from \"react\";\nimport { updateNewMessageBodyCreator, sendMessageCreator } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\"; // const DialogsContainer = () => { Собственный контейнер, который создали для понимания\n//     debugger;\n//     return <StoreContext.Consumer>\n//         {\n//          (store) => {\n//             let state = store.getState().dialogsPage;\n//\n//             let onSendMessageClick = () => {\n//                 store.dispatch(sendMessageCreator());\n//             }\n//\n//             let onNewMessageChange = (body) => {\n//                 store.dispatch(updateNewMessageBodyCreator(body));\n//             }\n//             return <Dialogs updateNewMessageBody={onNewMessageChange}\n//                             sendMessage={onSendMessageClick}\n//                             dialogsPage={state}/>;\n//         }\n//     }\n//     </StoreContext.Consumer>\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet mapStateToProps = state => {\n  // засунул это = store.getState().\n  return {\n    dialogsPage: state.dialogsPage,\n    isAuth: state.auth.isAuth\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  // засунул store.dispatch.bind(store)\n  return {\n    updateNewMessageBody: body => {\n      dispatch(updateNewMessageBodyCreator(body));\n    },\n    sendMessage: () => {\n      dispatch(sendMessageCreator());\n    }\n  };\n};\n\nlet AuthRedirectComponent = props => {\n  if (!this.props.isAuth) return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 35\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Dialogs, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 12\n  }, this);\n};\n\n_c = AuthRedirectComponent;\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent); //мы говорим= Dialogs = ты презентационная компонента, мы хотим\n// создать вокруг тебя контейнерную компоненту, которая снабдить тебя данными. Как бы мы dialogs законнектили к стору по этим правилам\n\nexport default DialogsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthRedirectComponent\");","map":{"version":3,"names":["React","updateNewMessageBodyCreator","sendMessageCreator","Dialogs","connect","Navigate","mapStateToProps","state","dialogsPage","isAuth","auth","mapDispatchToProps","dispatch","updateNewMessageBody","body","sendMessage","AuthRedirectComponent","props","DialogsContainer"],"sources":["/Users/ajzanrahmetova/Desktop/Self study/React-JS-IT-cama/projects/1/src/components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React from \"react\";\nimport { updateNewMessageBodyCreator, sendMessageCreator } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n// const DialogsContainer = () => { Собственный контейнер, который создали для понимания\n//     debugger;\n//     return <StoreContext.Consumer>\n//         {\n//          (store) => {\n//             let state = store.getState().dialogsPage;\n//\n//             let onSendMessageClick = () => {\n//                 store.dispatch(sendMessageCreator());\n//             }\n//\n//             let onNewMessageChange = (body) => {\n//                 store.dispatch(updateNewMessageBodyCreator(body));\n//             }\n//             return <Dialogs updateNewMessageBody={onNewMessageChange}\n//                             sendMessage={onSendMessageClick}\n//                             dialogsPage={state}/>;\n//         }\n//     }\n//     </StoreContext.Consumer>\n// }\n\nlet mapStateToProps = (state) =>{ // засунул это = store.getState().\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth: state.auth.isAuth\n    }\n}\n\nlet mapDispatchToProps = (dispatch) =>{ // засунул store.dispatch.bind(store)\n    return{\n        updateNewMessageBody: (body) => {\n            dispatch(updateNewMessageBodyCreator(body));\n        },\n        sendMessage: () => {\n            dispatch(sendMessageCreator());\n        }\n    }\n}\n\nlet AuthRedirectComponent = (props) =>{\n    if(!this.props.isAuth) return <Navigate to=\"/login\" />\n    return <Dialogs {...props} />\n}\n\nconst DialogsContainer= connect(mapStateToProps, mapDispatchToProps )(AuthRedirectComponent);\n//мы говорим= Dialogs = ты презентационная компонента, мы хотим\n// создать вокруг тебя контейнерную компоненту, которая снабдить тебя данными. Как бы мы dialogs законнектили к стору по этим правилам\n\nexport default DialogsContainer;"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,2BAAT,EAAsCC,kBAAtC,QAAgE,6BAAhE;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,QAAR,QAAuB,kBAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,IAAIC,eAAe,GAAIC,KAAD,IAAU;EAAE;EAC9B,OAAO;IACHC,WAAW,EAAED,KAAK,CAACC,WADhB;IAEHC,MAAM,EAAEF,KAAK,CAACG,IAAN,CAAWD;EAFhB,CAAP;AAIH,CALD;;AAOA,IAAIE,kBAAkB,GAAIC,QAAD,IAAa;EAAE;EACpC,OAAM;IACFC,oBAAoB,EAAGC,IAAD,IAAU;MAC5BF,QAAQ,CAACX,2BAA2B,CAACa,IAAD,CAA5B,CAAR;IACH,CAHC;IAIFC,WAAW,EAAE,MAAM;MACfH,QAAQ,CAACV,kBAAkB,EAAnB,CAAR;IACH;EANC,CAAN;AAQH,CATD;;AAWA,IAAIc,qBAAqB,GAAIC,KAAD,IAAU;EAClC,IAAG,CAAC,KAAKA,KAAL,CAAWR,MAAf,EAAuB,oBAAO,QAAC,QAAD;IAAU,EAAE,EAAC;EAAb;IAAA;IAAA;IAAA;EAAA,QAAP;EACvB,oBAAO,QAAC,OAAD,OAAaQ;EAAb;IAAA;IAAA;IAAA;EAAA,QAAP;AACH,CAHD;;KAAID,qB;AAKJ,MAAME,gBAAgB,GAAEd,OAAO,CAACE,eAAD,EAAkBK,kBAAlB,CAAP,CAA8CK,qBAA9C,CAAxB,C,CACA;AACA;;AAEA,eAAeE,gBAAf"},"metadata":{},"sourceType":"module"}